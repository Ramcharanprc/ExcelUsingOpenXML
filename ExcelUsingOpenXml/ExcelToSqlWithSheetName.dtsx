<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/3/2021 9:41:36 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="RAMCHARANPRC"
  DTS:CreatorName="RAMCHARANPRC\Ram charan"
  DTS:DTSID="{81756C99-F41E-47DB-B4DA-91B67B17629E}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.123"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package2"
  DTS:PackageType="5"
  DTS:VersionBuild="6"
  DTS:VersionGUID="{46DCA1FE-56DD-4A82-A122-998FCF58B9A7}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0F2CE81C-F5C1-46F3-8BF2-F7CBA8F1D5F6}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::FolderPath]+ @[$Project::FileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelPath">
      <DTS:VariableValue
        DTS:DataType="8">E:\Work\Practice\Out1.xlsx</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{398EDC1A-A140-4B6A-95F3-4E602CC40D09}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_18a81746c7ff402ea3f43a30049faade"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ExcelPath,$Project::ProcName,$Project::ConnectionString,$Project::DllPath,$Project::DllName,$Project::TableName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_18a81746c7ff402ea3f43a30049faade.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{DB7157B2-9821-400F-A5FD-D2201AC5D4EB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_18a81746c7ff402ea3f43a30049faade</RootNamespace>
    <AssemblyName>ST_18a81746c7ff402ea3f43a30049faade</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml">
      <HintPath>C:\Users\Ram charan\.nuget\packages\documentformat.openxml\2.12.1\lib\net40\DocumentFormat.OpenXml.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>C:\Users\Ram charan\AppData\Local\Temp\Vsta\SSIS_ST150\VstaZhcqAM8FIkeZFiwAFhMDQw\packages\WindowsBase.4.6.1055.0\lib\WindowsBase.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="WindowsBase" version="4.6.1055.0" targetFramework="net47" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_18a81746c7ff402ea3f43a30049faade.Properties.Settings.get_Default():ST_18a81746c7ff402ea3f43a30049faade.Properties.Sett" +
    "ings")]

namespace ST_18a81746c7ff402ea3f43a30049faade.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Reflection;
using System.IO;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
#endregion

namespace ST_18a81746c7ff402ea3f43a30049faade
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        public ScriptMain()
        {
            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
        }

        public Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            Assembly assembly = null;
            try
            {
                assembly = LoadAssembly(args, assembly);
            }
            catch (Exception exception)
            {
                Dts.Log(exception.ToString(), 0, new byte[0]);
                throw;
            }

            Dts.Log("Exiting CurrentDomain_AssemblyResolve", 0, new byte[0]);
            return assembly;
        }

        private Assembly LoadAssembly(ResolveEventArgs args, Assembly assembly)
        {
            //$Project::DllPath,$Project::DllName
            string DllPath = Dts.Variables["$Project::DllPath"].Value.ToString();
            string DllName = Dts.Variables["$Project::DllName"].Value.ToString();

            string dllFilename = Path.Combine(DllPath, DllName);

            byte[] AssmBytes = File.ReadAllBytes(dllFilename);
            assembly = Assembly.Load(AssmBytes);

            return assembly;
        }
        public void Main()
        {
            string tableName = Dts.Variables["$Project::TableName"].Value.ToString();
            string FolderPath = Dts.Variables["User::ExcelPath"].Value.ToString();
            //string FileName = Dts.Variables["$Project::FileName"].Value.ToString();
            //string ProcName = Dts.Variables["$Project::ProcName"].Value.ToString();
            string ConnnectionString = Dts.Variables["$Project::ConnectionString"].Value.ToString();
            string fullPath = FolderPath /*+ FileName*/;

            DataTable dt = new DataTable();
            List<string> ExcelColumnNames = new List<string>();
            List<string> test = new List<string>();

            using (SpreadsheetDocument spreadsheet = SpreadsheetDocument.Open(FolderPath, false))
            {

                Sheet sheet = spreadsheet.WorkbookPart.Workbook.Descendants<Sheet>().Where(sht => sht.Name == "Raj").FirstOrDefault();
                Worksheet worksheet = (spreadsheet.WorkbookPart.GetPartById(sheet.Id.Value) as WorksheetPart).Worksheet;
                IEnumerable<Row> rows = worksheet.GetFirstChild<SheetData>().Descendants<Row>();

                int counter = 1;
                foreach (Row row in rows)
                {
                    if (counter == 1)
                    {
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Columns.Add(GetValue(spreadsheet, cell));
                            test.Add(GetValue(spreadsheet, cell));
                        }
                        counter = 0;
                    }
                    else
                    {
                        dt.Rows.Add();
                        int cellCounter = 0;
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Rows[dt.Rows.Count - 1][cellCounter] = GetValue(spreadsheet, cell);
                            test.Add(GetValue(spreadsheet, cell));
                            cellCounter++;
                        }
                    }
                }
            }
            SqlConnection sqlConn = new SqlConnection(ConnnectionString);
            sqlConn.Open();
            string query = "Select * from " + tableName + " where TableName = 'TableCopy'";
            SqlCommand cmd = new SqlCommand(query, sqlConn);


            DataTable tableReferenceForColumnMapping = new DataTable();
            tableReferenceForColumnMapping.Load(cmd.ExecuteReader());
            List<string> TableColumnNamesFromSql = new List<string>();
            /*foreach (DataColumn column in tableReferenceForColumnMapping.Columns)
            {
                TableColumnNamesFromSql.Add(column.ColumnName);
            }*/
            foreach (DataRow Row in tableReferenceForColumnMapping.Rows)
            {
                TableColumnNamesFromSql.Add(Row[0].ToString());
                ExcelColumnNames.Add(Row[2].ToString());
            }

            SqlBulkCopy objBulk = new SqlBulkCopy(sqlConn);
            objBulk.DestinationTableName = "TableCopy";
            for (int counter = 0; counter < TableColumnNamesFromSql.Count; counter++)
            {
                if (ExcelColumnNames[counter] == TableColumnNamesFromSql.Find(x => x.Contains(ExcelColumnNames[counter])))
                {
                    objBulk.ColumnMappings.Add(ExcelColumnNames[counter], ExcelColumnNames[counter]);
                }

            }
            objBulk.WriteToServer(dt);
            sqlConn.Close();
            Dts.TaskResult = (int)ScriptResults.Success;
        }
        private static string GetValue(SpreadsheetDocument spreadsheet, Cell cell)
        {
            string Value = cell.CellValue.InnerText;
            if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
            {
                return spreadsheet.WorkbookPart.SharedStringTablePart.SharedStringTable.ChildElements.GetItem
                    (int.Parse(Value)).InnerText;
            }
            return Value;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_18a81746c7ff402ea3f43a30049faade</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_18a81746c7ff402ea3f43a30049faade</msb:DisplayName>
    <msb:ProjectId>{E92FEE2A-0788-4F9E-A5ED-8A93A807EB8A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_18a81746c7ff402ea3f43a30049faade.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_18a81746c7ff402ea3f43a30049faade")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_18a81746c7ff402ea3f43a30049faade")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_18a81746c7ff402ea3f43a30049faade.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_18a81746c7ff402ea3f43a30049faade.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_18a81746c7ff402ea3f43a30049faade.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_18a81746c7ff402ea3f43a30049faade.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_18a81746c7ff402ea3f43a30049faade.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_18a81746c7ff402ea3f43a30049faade.dll">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
DAAAAAAAAAACAAAAXAIAAEcAAACjAgAAFQAAAAAAAAATMAIASgAAAAIAABEDb08AAApvUAAACgoD
b1EAAAosNANvUQAACm9SAAAKGTMmAm8gAAAKb1MAAApvVAAACm9VAAAKBihWAAAKb1cAAApvUAAA
CioGKh4CKFgAAAoqrn4BAAAELR5ygwEAcNADAAACKFkAAApvWgAACnNbAAAKgAEAAAR+AQAABCoa
fgIAAAQqHgKAAgAABCoafgMAAAQqHgIoXAAACioucwsAAAaAAwAABCpiAwJ7BwAABAJ7CAAABG9F
AAAKb10AAAoqLnMQAAAGgAoAAAQqWgNvXgAACihfAAAKcvUBAHAoSAAACipCU0pCAQABAAAAAAAM
AAAAdjQuMC4zMDMxOQAAAAAFAGwAAAD8BwAAI34AAGgIAAB4CwAAI1N0cmluZ3MAAAAA4BMAAAAC
AAAjVVMA4BUAABAAAAAjR1VJRAAAAPAVAADAAwAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPoB
MwAWAAABAAAAUwAAAAcAAAALAAAAEQAAAAkAAABfAAAAAgAAABIAAAADAAAAAgAAAAMAAAAEAAAA
CQAAAAEAAAAHAAAAAQAAAAMAAAAHAAAAAAARBgEAAAAAAAYAFwRVCAYApgRVCAYAYwNCCA8AyQgA
AAYAkAPtBgYA+gPtBgYA2wPtBgYAjQTtBgYANwTtBgYAUATtBgYApwPtBgYAwgNPBQoAawTABQoA
swLABQYARwvtBgYA5Al0BgYAWgl0BgYAZAd0Bg4AqAH8AAYAqgAfAQ4AVgdoCg4AZAFoCg4AWQto
ChIAjQouBRIA6wnxCQYAnAAfARIAKgvxCRIAOQbxCQYAGwiFCQ4AJgv8AAYA3AF0BgYAbwB0BgYA
ewZ0BgYAKwNVCAYAtwB0BgYARgNCCAYAzAd1CAYAgQfYBhYAFgP7BRYAdwP7BRYA6gLDBgYAnAZ0
BgYA3Ad0BgoA6QXABQYAxAR0BhoACwkzAhoAyAEzAgYAjwXLAAYADALLABIA1QouBRIAmAXxCRIA
fgpDBgYAYQAfAR4A0QGNBxIA0wRDBhIAPgBDBhIA8AcuBRIA4gouBRIA7gouBRIAJArxCRIACAHx
CQ4AIgf8AA4AuAb8AA4ANwf8AAYAMAt0Bg4AzwL8AA4ASQduBwYAhAV0Bg4ApQdoCg4AmQf8AA4A
/wZoCg4AaQVoChIAaALxCRIA4wTxCRIAkABDBhIAMwnxCRIAewBDBhIAuwouBRIAtgHxCRIA/ApD
BgYAsQB0BgYAbAJ0BgYA6AF0BgAAAADCAAAAAAABAAEAAQAQAJEGhAE5AAEAAQAAABAAfAjYCEEA
AQAGAAABEABRCdgIpQADAAoAAwEAAKgJAACFAAQADQADARAAFwAAAEEABwANAAMhEAAbAQAAQQAK
AA8AEQCABn4CEQCjAoMCEQB0AYgCBgb0AIwCVoCYCY8CVoCDAo8CBgAVCZMCBgAFCIwCBgAsAJoC
NgC+AKICFgABAKYCUCAAAAAAhhg1CAYAAQBwIAAAAACGABAFsAIBANAgAAAAAIEAQwu4AgMAMCEA
AAAAhgCXBgYABQBAJQAAAACRAO0EwQIFAJYlAAAAAIMYNQgGAAcAniUAAAAAkwjIB8kCBwDKJQAA
AACTCIsCzwIHANElAAAAAJMIlwLVAgcA2SUAAAAAlgg+CtwCCADgJQAAAACGGDUIBgAIAOglAAAA
AJEYOwjhAggAliUAAAAAhhg1CAYACAD0JQAAAACDADMATQIIAA0mAAAAAJEYOwjhAgkAliUAAAAA
hhg1CAYACQAZJgAAAACDAAoA5QIJAAAAAQDBBwAAAgBrCQAAAQBrCQAAAgBQCwAAAQAUCgAAAgA+
BgAAAQD2BAAAAQAuCwAAAQAuCgkANQgBABEANQgGABkANQgKACkANQgQADEANQgQADkANQgQAEEA
NQgQAEkANQgQAFEANQgQAFkANQgQAGEANQgQAGkANQgGABEBNQgGACEBNQgGAEEBNQgVAHEANQgG
AFEBpgYcAFkBNQgiAFEB/AQoAHEAoAk2AIEAggU8AGEBiwVAAGEBBwlMAHEBWgZSAHkByQRZAIEB
UwJdAIkBJgljAHkATQFpAJkANQgGAAwANQgGAMEAjAa0AMEA0Qq7AJEBlAXBAKEBtgnHABQANQgi
ALEBcQLgALEBSgr6AMkAOgEHARwAyQQUAckBQQEZAdkBIAogAaEBVgEmASQAJwg/ASwAoQoUATQA
Jwg/ATwAoQoUAZkAeQljAfEBUgFpAQwAUgFwAekADwt2AfkACAMGAJkA1Al6AQkCcQuAAQECUgGL
ARECrQqSAQECWgaWAfEAYwacAakANQgQABkCjAYGACEC3QmiAbEANQipAbEAswewAZkATQG2AREC
Jwi9AekAoQpZAPEAWgbCAbkANQjHAbkAGgIQAAwAWgbNAUQANQgiAAwAbwHaASECZQvmAbkAPgns
ATkCUgHyAQwArQqSAbkADQj6ARkCAgMGAGEBWQoBAEkC3wQAAqEBGAs8AEkCWwIGAkwAyQQUAZEB
twoaAnECsgEgAqEBwgkmAokCEAMsAoECbAYxAoEANQgGAJEC+gE4ApECNgtBAikBNQhGAkkBNQgG
ACECcAlNAskAEQIHAbkBMgpSAggAFAB0AggAGAB5AikAewAkAy4ACwD8Ai4AEwAFAy4AGwAkAy4A
IwAtAy4AKwBWAy4AMwBWAy4AOwBWAy4AQwAtAy4ASwBcAy4AUwBWAy4AWwBzA0MAYwB5AkkAewAk
A2EAawB5AmMAcwB5AsMAawB5AuMAawB5Ai8ASABwAAMAAQAEAAMAAADMB+sCAACrAvECAABRCvcC
AgAHAAMAAgAIAAUAAQAJAAUAAgAKAAcArgDXAA0BNwFIAVQBXAHTARECBIAAAAEAAAAYHgWhAAAA
AAAAhAEAAAQAAAAAAAAAAAAAAFkCEgEAAAAADwAAAAAAAAAAAAAAYgKhBQAAAAAEAAAAAAAAAAAA
AABZAvwAAAAAAAIADAABAAAAAAAAAGsCQwYAAAAABAAAAAAAAAAAAAAAWQJ0BgAAAAAPAAAAAAAA
AAAAAABiAtUAAAAAAAQAAAAAAAAAAAAAAFkCdwIAAAAAAAAAAAEAAACGCAAABQACAAYAAgAHAAIA
RQDSAEkA0gBLANIAVQAsAUUAMgFFAE8BawCHAQAAADw+OV9fM18wADxNYWluPmJfXzNfMAA8PmNf
X0Rpc3BsYXlDbGFzczNfMAA8PjlfXzEAPE1haW4+Yl9fMQBPcGVuWG1sQ29tcGFyYWJsZVNpbXBs
ZVJlZmVyZW5jZWAxAElFbnVtZXJhYmxlYDEAUHJlZGljYXRlYDEAT3BlblhtbFNpbXBsZVZhbHVl
YDEARW51bVZhbHVlYDEASUVudW1lcmF0b3JgMQBMaXN0YDEASW50MzIARnVuY2AyADw+OQA8TW9k
dWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lz
dGVtLkRhdGEAU2hlZXREYXRhAG1zY29ybGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJp
YwBnZXRfSWQAR2V0UGFydEJ5SWQATG9hZABBZGQAR2V0Rmlyc3RDaGlsZABTcWxDb21tYW5kAEZp
bmQAZGVmYXVsdEluc3RhbmNlAFNUXzE4YTgxNzQ2YzdmZjQwMmVhM2Y0M2EzMDA0OWZhYWRlAERh
dGFUYWJsZQBnZXRfU2hhcmVkU3RyaW5nVGFibGUAVmFyaWFibGUARW51bWVyYWJsZQBJRGlzcG9z
YWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAGdldF9OYW1lAHNl
dF9EZXN0aW5hdGlvblRhYmxlTmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAENv
bWJpbmUAZ2V0X0RhdGFUeXBlAENlbGxUeXBlAFdoZXJlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0
X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1v
ZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFz
ZQBDbG9zZQBEaXNwb3NlAFBhcnNlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJh
dGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJp
YnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3Nl
bWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlD
b25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1i
bHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFz
c2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBCeXRl
AGdldF9WYWx1ZQBTdHJpbmdWYWx1ZQBnZXRfQ2VsbFZhbHVlAEdldFZhbHVlAHZhbHVlAGFkZF9B
c3NlbWJseVJlc29sdmUAQ3VycmVudERvbWFpbl9Bc3NlbWJseVJlc29sdmUARG9jdW1lbnRGb3Jt
YXQuT3BlblhtbC5QYWNrYWdpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTcWxCdWxrQ29w
eUNvbHVtbk1hcHBpbmcAVG9TdHJpbmcATG9nAFBhdGgAZ2V0X1dvcmtib29rAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRU
YXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF8xOGE4MTc0NmM3
ZmY0MDJlYTNmNDNhMzAwNDlmYWFkZS5kbGwAQ2VsbABjZWxsAERvY3VtZW50Rm9ybWF0Lk9wZW5Y
bWwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AR2V0SXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVu
AFNjcmlwdE1haW4AQXBwRG9tYWluAGdldF9DdXJyZW50RG9tYWluAERhdGFDb2x1bW4AU3lzdGVt
LkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3Fs
QnVsa0NvcHlDb2x1bW5NYXBwaW5nQ29sbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRh
Um93Q29sbGVjdGlvbgBEYkNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lzdGVt
LkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAFN5c3RlbS5MaW5xAElEYXRhUmVhZGVyAFNxbERhdGFS
ZWFkZXIARXhlY3V0ZVJlYWRlcgBzZW5kZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBSZXNvbHZlRXZl
bnRIYW5kbGVyAE9wZW5YbWxQYXJ0Q29udGFpbmVyAGNvdW50ZXIAV3JpdGVUb1NlcnZlcgBJRW51
bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lz
dGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzE4YTgxNzQ2
YzdmZjQwMmVhM2Y0M2EzMDA0OWZhYWRlLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBE
ZWJ1Z2dpbmdNb2RlcwBTVF8xOGE4MTc0NmM3ZmY0MDJlYTNmNDNhMzAwNDlmYWFkZS5Qcm9wZXJ0
aWVzAGdldF9WYXJpYWJsZXMARXhjZWxDb2x1bW5OYW1lcwBSZWFkQWxsQnl0ZXMAQ2VsbFZhbHVl
cwBnZXRfQ29sdW1uTWFwcGluZ3MAU2V0dGluZ3MAUmVzb2x2ZUV2ZW50QXJncwBhcmdzAENvbnRh
aW5zAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0
UmVzdWx0cwBEZXNjZW5kYW50cwBnZXRfQ2hpbGRFbGVtZW50cwBnZXRfUm93cwBDb25jYXQAT2Jq
ZWN0AFNoZWV0AERvY3VtZW50Rm9ybWF0Lk9wZW5YbWwuU3ByZWFkc2hlZXQAc3ByZWFkc2hlZXQA
Z2V0X1dvcmtzaGVldABzaHQAb3BfSW1wbGljaXQAZ2V0X0RlZmF1bHQARmlyc3RPckRlZmF1bHQA
c2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AE9wZW5YbWxFbGVtZW50AFNwcmVh
ZHNoZWV0RG9jdW1lbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AGdldF9TaGFyZWRTdHJpbmdUYWJs
ZVBhcnQAZ2V0X1dvcmtib29rUGFydABPcGVuWG1sUGFydABXb3Jrc2hlZXRQYXJ0AE9wZW5YbWxF
bGVtZW50TGlzdABNb3ZlTmV4dABnZXRfSW5uZXJUZXh0AERhdGFSb3cAeABBcnJheQBnZXRfQXNz
ZW1ibHkATG9hZEFzc2VtYmx5AGFzc2VtYmx5AFNxbEJ1bGtDb3B5AG9wX0VxdWFsaXR5AEVtcHR5
AAAAS0UAeABpAHQAaQBuAGcAIABDAHUAcgByAGUAbgB0AEQAbwBtAGEAaQBuAF8AQQBzAHMAZQBt
AGIAbAB5AFIAZQBzAG8AbAB2AGUAACMkAFAAcgBvAGoAZQBjAHQAOgA6AEQAbABsAFAAYQB0AGgA
ACMkAFAAcgBvAGoAZQBjAHQAOgA6AEQAbABsAE4AYQBtAGUAACckAFAAcgBvAGoAZQBjAHQAOgA6
AFQAYQBiAGwAZQBOAGEAbQBlAAAfVQBzAGUAcgA6ADoARQB4AGMAZQBsAFAAYQB0AGgAADUkAFAA
cgBvAGoAZQBjAHQAOgA6AEMAbwBuAG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAAB1TAGUAbABl
AGMAdAAgACoAIABmAHIAbwBtACAAAD0gAHcAaABlAHIAZQAgAFQAYQBiAGwAZQBOAGEAbQBlACAA
PQAgACcAVABhAGIAbABlAEMAbwBwAHkAJwABE1QAYQBiAGwAZQBDAG8AcAB5AABxUwBUAF8AMQA4
AGEAOAAxADcANAA2AGMANwBmAGYANAAwADIAZQBhADMAZgA0ADMAYQAzADAAMAA0ADkAZgBhAGEA
ZABlAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAHUgBhAGoAAAAA
AIFe3TUf8JpGlt/kRYxMd9wABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCdBQAAEoCpBSACARwY
BiABARKArQYHAhI9EkkFIAASgLEDIAAOByADAQ4IHQUDBwEOBSAAEoC5BiABEoC9HAMgABwFAAIO
Dg4FAAEdBQ4GAAESPR0FPQcXEhgODhJNFRJRAQ4SVRJZFRJRAQ4SXRJhEmUIFRJpARJtEm0VEmkB
EnEScQgScRJ1EnkSfRUSgIEBDggFFRJRAQ4GAAISYQ4CBSAAEoDJBSAAEoDNCjABABUSgNUBHgAE
CgESZQgVEoCNAhJlAhkQAQIVEoDVAR4AFRKA1QEeABUSgI0CHgACDBABAR4AFRKA1QEeAAUgABKA
3QYVEoDhAQ4EIAATAAYgARKA6Q4FIAASgPEFMAEAHgAFCgESgPUECgESbQcVEoDVARJtCCAAFRJp
ARMABhUSaQESbQQKARJxBxUSgNUBEnEGFRJpARJxBSAAEoD5BiABEoD9DgUgAQETAAMgAAIFIAAS
gQEGEAEAHR4AAwoBHAYgARJ5HRwDIAAIBSABEnkIBSACAQgcBgADDg4ODgYgAgEOElUFIAASgRUG
IAEBEoEZBCAAEnUEIAEcCAUgAQESVQUgARMACAYVEoCBAQ4LIAETABUSgIEBEwAFAAICDg4FIAAS
gR0HIAISgSEODgUgAQESTQUgABKBKQogABUSgS0BEYExCBUSgTUBEYExBSAAEoE5BSAAEoE9BSAA
EoFBBAABCA4GIAESgNEICAABEoFJEYFNBCAAEj0GIAIBDhI9BCABAg4GAAEOEoDdCLd6XFYZNOCJ
CImEXc2AgMyRCI+wbLZNAZoXBAAAAAAEAQAAAAQGEoCVBAYSgJkDBhIQAgYIAwYRFAYGFRJRAQ4H
BhUSgIEBDgMGEhwJBhUSgI0CEmUCByACEj0cEkUIIAISPRJFEj0HAAIOEmEScQUAABKAlQUAABKA
mQYAAQESgJkEAAASEAMAAAEFIAECEmUFCAASgJUFCAASgJkECAASEAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMThhODE3NDZjN2ZmNDAyZWEz
ZjQzYTMwMDQ5ZmFhZGUAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMQAASQEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29y
ayA0LjcAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIs
IG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9r
ZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIA
AAAAAAAAAAAAAFBBRFBBRFC0AAAAwEAAAAAAAAAAAAAA2kAAAAAgAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMxAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAA
ABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQAFoRgeAAABAAWhGB4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABi
ADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEA
bQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABf
ADEAOABhADgAMQA3ADQANgBjADcAZgBmADQAMAAyAGUAYQAzAGYANAAzAGEAMwAwADAANAA5AGYA
YQBhAGQAZQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADcAMAA0
AC4ANAAxADIAMgAxAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADEA
OABhADgAMQA3ADQANgBjADcAZgBmADQAMAAyAGUAYQAzAGYANAAzAGEAMwAwADAANAA5AGYAYQBh
AGQAZQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAA
eQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBt
AGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AMQA4AGEAOAAxADcANAA2AGMANwBmAGYANAAwADIAZQBhADMAZgA0ADMAYQAzADAAMAA0
ADkAZgBhAGEAZABlAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADEAOABhADgAMQA3ADQANgBjADcAZgBmADQAMAAyAGUAYQAzAGYANAAzAGEAMwAwADAANAA5
AGYAYQBhAGQAZQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NwA3ADAANAAuADQAMQAyADIAMQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4ANwA3ADAANAAuADQAMQAyADIAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADsMAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="238,111" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>