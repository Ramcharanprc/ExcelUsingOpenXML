<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/18/2021 4:36:35 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="RAMCHARANPRC"
  DTS:CreatorName="RAMCHARANPRC\Ram charan"
  DTS:DTSID="{65BFACE3-8511-497C-9B6C-64FC562A4BDC}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.123"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package2"
  DTS:PackageType="5"
  DTS:VersionBuild="6"
  DTS:VersionGUID="{91333DDA-D2B8-4DAD-AB8F-485A690833B9}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{A1FCE69A-BFE3-439A-9AA5-993ECE2990FA}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_c6025eb311be4fecbd1d7c2bfede48ef"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::FolderPath,$Project::FileName,$Project::ConnectionString,$Project::DllPath,$Project::DllName">
          <ProjectItem
            Name="ST_c6025eb311be4fecbd1d7c2bfede48ef.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{E5BB6300-B842-4E7C-9A05-B6F50CA91941}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_c6025eb311be4fecbd1d7c2bfede48ef</RootNamespace>
    <AssemblyName>ST_c6025eb311be4fecbd1d7c2bfede48ef</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml">
      <HintPath>E:\Work\Practice\Packages\documentformat.openxml\2.12.1\lib\net40\DocumentFormat.OpenXml.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="DocumentFormat.OpenXml" version="2.13.0" targetFramework="net47" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties.Settings.get_Default():ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties.Sett" +
    "ings")]

namespace ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Collections.Generic;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using System.Reflection;
using System.IO;
using System.Security.Policy;
using System.Security;
#endregion


namespace ST_c6025eb311be4fecbd1d7c2bfede48ef
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 
        public ScriptMain()
        {
            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
        }

        public Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            Assembly assembly = null;
            try
            {
                assembly = LoadAssembly(args, assembly);
            }
            catch (Exception exception)
            {
                Dts.Log(exception.ToString(), 0, new byte[0]);
                throw;
            }

            Dts.Log("Exiting CurrentDomain_AssemblyResolve", 0, new byte[0]);
            return assembly;
        }

        private Assembly LoadAssembly(ResolveEventArgs args, Assembly assembly)
        {
            //$Project::DllPath,$Project::DllName
            string DllPath = Dts.Variables["$Project::DllPath"].Value.ToString();
            string DllName = Dts.Variables["$Project::DllName"].Value.ToString();

            string dllFilename = Path.Combine(DllPath, DllName);

            byte[] AssmBytes = File.ReadAllBytes(dllFilename);
            assembly = Assembly.Load(AssmBytes);

            return assembly;
        }
        public void Main()
		{
            // TODO: Add your code here
            string FolderPath = Dts.Variables["$Project::FolderPath"].Value.ToString();
            string FileName = Dts.Variables["$Project::FileName"].Value.ToString();
            string ConnectionString = Dts.Variables["$Project::ConnectionString"].Value.ToString();
            string fullPath = FolderPath + FileName;

            using (SpreadsheetDocument spreadsheet = SpreadsheetDocument.Create(fullPath, SpreadsheetDocumentType.Workbook))
            {
                WorkbookPart workbookPart = spreadsheet.AddWorkbookPart();
                workbookPart.Workbook = new Workbook();
                uint sheetId = 1;
                spreadsheet.WorkbookPart.Workbook.Sheets = new Sheets();
                Sheets sheets = spreadsheet.WorkbookPart.Workbook.GetFirstChild<Sheets>();

                SqlConnection conn = new SqlConnection(ConnectionString);
                conn.Open();
                //SqlCommand cmd = new SqlCommand("select * from TimeTable", conn);
                SqlCommand cmd = new SqlCommand("Test", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@Name", "Ram"));

                DataTable dt = new DataTable();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                FillExcelSheet(dt, "Ram", spreadsheet, workbookPart, sheetId, sheets);
                sheetId++;

                //cmd = new SqlCommand("Select * from student", conn);
                cmd = new SqlCommand("Test2", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@Name", "Ram"));
                cmd.Parameters.Add(new SqlParameter("@Class", "1"));
                dt = new DataTable();
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                FillExcelSheet(dt, "Raj", spreadsheet, workbookPart, sheetId, sheets);
                conn.Close();

            }
            Dts.TaskResult = (int)ScriptResults.Success;
		}
        private static void FillExcelSheet(DataTable dt, String SheetName, SpreadsheetDocument spreadsheet, WorkbookPart workbookPart, uint sheetId, Sheets sheets)
        {
            List<String> Header = new List<string>();
            foreach (DataColumn column in dt.Columns)
            {
                Header.Add(column.ColumnName);
            }


            WorksheetPart workSheetPart = workbookPart.AddNewPart<WorksheetPart>();
            SheetData sheetData = new SheetData();
            workSheetPart.Worksheet = new Worksheet(sheetData);



            Sheet sheet = new Sheet() { Id = workbookPart.GetIdOfPart(workSheetPart), SheetId = sheetId, Name = SheetName };
            sheets.Append(sheet);

            Row headerRow = new Row();

            foreach (var item in Header)
            {
                Cell cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item);
                headerRow.Append(cell);
            }
            sheetData.AppendChild(headerRow);

            foreach (DataRow dtRow in dt.Rows)
            {
                Row row = new Row();
                foreach (string col in Header)
                {
                    Cell cell = new Cell();
                    cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(dtRow[col].ToString());
                    row.AppendChild(cell);
                }
                sheetData.AppendChild(row);
            }
            workbookPart.Workbook.Save();
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_c6025eb311be4fecbd1d7c2bfede48ef</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_c6025eb311be4fecbd1d7c2bfede48ef</msb:DisplayName>
    <msb:ProjectId>{6AAC8688-2AF3-4742-96D2-FDD37D64424E}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_c6025eb311be4fecbd1d7c2bfede48ef.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_c6025eb311be4fecbd1d7c2bfede48ef")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_c6025eb311be4fecbd1d7c2bfede48ef")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_c6025eb311be4fecbd1d7c2bfede48ef.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_c6025eb311be4fecbd1d7c2bfede48ef.dll">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
HgIoVAAACiqufgEAAAQtHnJfAQBw0AMAAAIoVQAACm9WAAAKc1cAAAqAAQAABH4BAAAEKhp+AgAA
BCoeAoACAAAEKhp+AwAABCoeAihYAAAKKi5zCwAABoADAAAEKgAAQlNKQgEAAQAAAAAADAAAAHY0
LjAuMzAzMTkAAAAABQBsAAAABAcAACN+AABwBwAAZAoAACNTdHJpbmdzAAAAANQRAADUAQAAI1VT
AKgTAAAQAAAAI0dVSUQAAAC4EwAAEAMAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQsAAAD6ATMAFgAA
AQAAAE4AAAAFAAAABgAAAAwAAAALAAAAWAAAAAIAAAAQAAAABAAAAAIAAAADAAAABAAAAAMAAAAB
AAAABgAAAAEAAAABAAAABAAAAAAAcQUBAAAAAAAGAFcDeAcGAOYDeAcGAKMCZQcPAOwHAAAGANAC
PAYGADoDPAYGABsDPAYGAM0DPAYGAHcDPAYGAJADPAYGAOcCPAYGAAIDuwQKAKsDIAUKAPIBIAUG
AE8KPAYGAN0IwwUGAFkIwwUGAKcGwwUOAK4JmgQOAO4JmgQOALEI9ggSAJkGWgkSAPIATgAGAA0A
bQAOABQKmgQOAFoA9ggOAPAI9ggOADoK9ggGAD4HewgSAAcGTgAGAAUBwwVjAE0HAAAOAJkF9ggS
ADYKTgAGAMoFwwUGAIYCZQcGANsGmAcGAMQGJwYWAFYCWwUWALcCWwUWACkCEgYGAGsCeAcGAOsF
wwUGAOsGwwUKAEkFIAUGAAQEwwUaAC4IXAEaAPwAXAEGAOIEHQAGADUBHQAGANcEwwUOAKoBowUO
APgE9ggOAIgJowUSAIwGsQYSANAAWgkSAMYAsQYSAJUBTgASAGMGWgkSABQHWgkSAC8HWgkSACEH
sQYSAE4GTgASAA4CTgAOAP8GmgQOACkJ9ggOAAgKmgQOAB8EowUOAAkEowUOAAEAowUOAEUI9ggO
AKEB9ggOAC8E9ggOAHAJowUSAHoGTgAOAJcJowUGAL0BwwUGABEBwwUAAAAAFAAAAAAAAQABAAEA
EADgBXYEOQABAAEAAAAQAJ8H+wdBAAEABgAAARAAUAj7B6UAAwAKAAMBAAC/CAAAjQAEAA0AEQDP
Be0BEQDiAfIBEQDiAPcBBgZGAPsBVoCdCP4BVoDCAf4BUCAAAAAAhhhYBwYAAQBwIAAAAACGAFgE
AgIBANAgAAAAAIEASwoKAgMAMCEAAAAAhgDmBQYABQD4IgAAAACRAOcIEwIFACAlAAAAAIMYWAcG
AAsAKCUAAAAAkwjXBiECCwBUJQAAAACTCMoBJwILAFslAAAAAJMI1gEtAgsAYyUAAAAAlgg/CTQC
DABqJQAAAACGGFgHBgAMAHIlAAAAAJEYXgc5AgwAAAABANAGAAACAGoIAAABAGoIAAACAFgKAAAB
AOQIAAACAFIBAAADABkJAAAEAPsJAAAFAJsAAAAGALgIAAABADkECQBYBwEAEQBYBwYAGQBYBwoA
KQBYBxAAMQBYBxAAOQBYBxAAQQBYBxAASQBYBxAAUQBYBxAAWQBYBxAAYQBYBxAAaQBYBwYAIQFY
BwYAQQFYBxUAUQFYBwYAcQBYBwYAWQH1BRwAYQFYByIAWQFEBCgAcQClCDYAgQDVBDwAaQHeBEAA
aQEqCEwAeQG6BVIAgQEVBFkAiQF8AV0AkQE4CGMAeQCjAGkAmQHWCF0AmQBPAoAAmQDrCYkAqQFY
BwYAoQD0BI4AmQDaCYkAoQDnBJUAqQBYBwYAqQGtCJsAsQG4AKEAsQBYBxAAuQHbBQYAwQFYB6wA
yQGRAbMAwQGOCLoA4QFYB8AA2QGoAMYAuQBYBwYA6QFYB88A8QGeBdYAuQFBAgYA+QBHAgYAaQFL
CQEADABYBwYAuQBvCAsBAQJKBxEB6QDCCVkA8QBDATwADACoABYB6QAtChwBCQIiCqEA0QBYBwYA
EQJYByUByQAlCS0B2QBYBwYACQLOCTQBIQIzCTsB2QCIAEIBKQIzCUkB2QCPAFAB2QA6AUIBsQHb
ACUB4QBYBwYADABKB1cBFADCCWgBCQFYBwYAHAAzCXYBQQKEAYIBSQJYBxAAQQIrBI4BFAAtChwB
UQKsAJUBuQDNCKIBEQG6BagBYQI/BAYAgQBYBwYAaQIjAbMBaQI+CrwBKQFYB8EBSQFYBwYACAAU
AOMBCAAYAOgBKQBzAHYCLgALAE4CLgATAFcCLgAbAHYCLgAjAH8CLgArAKgCLgAzAKgCLgA7AKgC
LgBDAH8CLgBLAK4CLgBTAKgCLgBbAMUCQwBjAOgBSQBzAHYCYQB7AOgBYwBrAOgBLwBIAHAA3AAD
AAEABAADAAAA2wY9AgAA6gFDAgAAQwlJAgIABwADAAIACAAFAAEACQAFAAIACgAHAAUBYQFtAQSA
AAABAAAAnx5RfgAAAAAAAHYEAAAEAAAAAAAAAAAAAADIAWQAAAAAAA8AAAAAAAAAAAAAANEBAQUA
AAAAAgAMAAEAAAAAAAAA2gGjBQAAAAAEAAAAAAAAAAAAAADIAU4AAAAAAAQAAAAAAAAAAAAAAMgB
wwUAAAAADwAAAAAAAAAAAAAA0QEnAAAAAAAAAAAAAQAAAKkHAAAFAAIATQCnAHcAIAGhAJ0BoQCt
AQAAAAAARW51bVZhbHVlYDEATGlzdGAxADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBTaGVldERhdGEAbXNjb3JsaWIA
U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAc2V0X0lkAHNldF9TaGVldElkAHNoZWV0SWQATG9h
ZABBZGQAQXBwZW5kQ2hpbGQAR2V0Rmlyc3RDaGlsZABEYkNvbW1hbmQAU3FsQ29tbWFuZABBcHBl
bmQAZGVmYXVsdEluc3RhbmNlAERhdGFUYWJsZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1l
VHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAHNldF9OYW1lAGdldF9Db2x1bW5OYW1l
AFNoZWV0TmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAENvbWJpbmUAc2V0X0Rh
dGFUeXBlAHNldF9Db21tYW5kVHlwZQBDZWxsVHlwZQBTcHJlYWRzaGVldERvY3VtZW50VHlwZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBDcmVhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29t
cGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1
Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0
ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJp
YnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRB
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAEJ5dGUAVUludDMyVmFsdWUAZ2V0X1ZhbHVlAFN0cmluZ1ZhbHVlAHNldF9DZWxsVmFs
dWUAdmFsdWUAU2F2ZQBhZGRfQXNzZW1ibHlSZXNvbHZlAEN1cnJlbnREb21haW5fQXNzZW1ibHlS
ZXNvbHZlAFNUX2M2MDI1ZWIzMTFiZTRmZWNiZDFkN2MyYmZlZGU0OGVmAERvY3VtZW50Rm9ybWF0
Lk9wZW5YbWwuUGFja2FnaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcATG9n
AFBhdGgAZ2V0X1dvcmtib29rAHNldF9Xb3JrYm9vawBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlw
dFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmpl
Y3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfYzYwMjVlYjMxMWJlNGZlY2JkMWQ3YzJi
ZmVkZTQ4ZWYuZGxsAENlbGwARmlsbABEb2N1bWVudEZvcm1hdC5PcGVuWG1sAGdldF9JdGVtAFN5
c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBBcHBEb21haW4AZ2V0X0N1cnJl
bnREb21haW4ARGF0YUNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXph
dGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBTcWxQYXJhbWV0ZXJD
b2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAERiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4
Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8Ac2VuZGVyAGdldF9SZXNvdXJj
ZU1hbmFnZXIAUmVzb2x2ZUV2ZW50SGFuZGxlcgBPcGVuWG1sUGFydENvbnRhaW5lcgBTcWxQYXJh
bWV0ZXIARGJEYXRhQWRhcHRlcgBTcWxEYXRhQWRhcHRlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJh
dG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2M2MDI1ZWIzMTFiZTRmZWNiZDFkN2MyYmZl
ZGU0OGVmLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9j
NjAyNWViMzExYmU0ZmVjYmQxZDdjMmJmZWRlNDhlZi5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMA
UmVhZEFsbEJ5dGVzAENlbGxWYWx1ZXMAU2V0dGluZ3MAUmVzb2x2ZUV2ZW50QXJncwBhcmdzAGdl
dF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfUGFyYW1ldGVycwBTdWNjZXNzAGdldF9E
dHMAc2V0X1NoZWV0cwBzaGVldHMAU2NyaXB0UmVzdWx0cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0
AGR0AEZpbGxFeGNlbFNoZWV0AERvY3VtZW50Rm9ybWF0Lk9wZW5YbWwuU3ByZWFkc2hlZXQAc3By
ZWFkc2hlZXQAc2V0X1dvcmtzaGVldABvcF9JbXBsaWNpdABnZXRfRGVmYXVsdABzZXRfVGFza1Jl
c3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAT3BlblhtbENvbXBvc2l0ZUVsZW1lbnQAT3Blblht
bEVsZW1lbnQAT3BlblhtbFBhcnRSb290RWxlbWVudABTcHJlYWRzaGVldERvY3VtZW50AGdldF9D
dXJyZW50AEdldElkT2ZQYXJ0AGdldF9Xb3JrYm9va1BhcnQAQWRkV29ya2Jvb2tQYXJ0AHdvcmti
b29rUGFydABPcGVuWG1sUGFydABXb3Jrc2hlZXRQYXJ0AEFkZE5ld1BhcnQATW92ZU5leHQARGF0
YVJvdwBnZXRfQXNzZW1ibHkATG9hZEFzc2VtYmx5AGFzc2VtYmx5AAAAAABLRQB4AGkAdABpAG4A
ZwAgAEMAdQByAHIAZQBuAHQARABvAG0AYQBpAG4AXwBBAHMAcwBlAG0AYgBsAHkAUgBlAHMAbwBs
AHYAZQAAIyQAUAByAG8AagBlAGMAdAA6ADoARABsAGwAUABhAHQAaAAAIyQAUAByAG8AagBlAGMA
dAA6ADoARABsAGwATgBhAG0AZQAAKSQAUAByAG8AagBlAGMAdAA6ADoARgBvAGwAZABlAHIAUABh
AHQAaAAAJSQAUAByAG8AagBlAGMAdAA6ADoARgBpAGwAZQBOAGEAbQBlAAA1JABQAHIAbwBqAGUA
YwB0ADoAOgBDAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAAAJVABlAHMAdAAAC0AATgBh
AG0AZQAAB1IAYQBtAAALVABlAHMAdAAyAAANQABDAGwAYQBzAHMAAAMxAAAHUgBhAGoAAHFTAFQA
XwBjADYAMAAyADUAZQBiADMAMQAxAGIAZQA0AGYAZQBjAGIAZAAxAGQANwBjADIAYgBmAGUAZABl
ADQAOABlAGYALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAAK9z
Z1Esc89KhbpHHZ14R48ABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCdBQAAEoCtBSACARwYBiAB
ARKAsQYHAhI9EkkFIAASgLUDIAAOByADAQ4IHQUDBwEOBSAAEoC9BiABEoDBHAMgABwFAAIODg4F
AAEdBQ4GAAESPR0FDwcIDg4STRJRCRJVElkSXQgAAhJNDhGA0QQgABJRBiABARKA1QUgABKA1QUg
AQESVQUwAQAeAAQKARJVBiACAQ4SWQYgAQERgOkFIAASgO0FIAIBDhwIIAESgPESgPEGIAEBEoDh
BSABCBJdKAcPFRJhAQ4SZRJpEm0ScRJ1EnkSfRURgIEBDg4SgIUSgIkScQ4SgIUFFRJhAQ4FIAAS
gP0EIAASdQUgAQETAAMgAAIECgESZQcgAQEdEoDZBiABARKBCQYgAQ4SgQ0GAAESgREOBiABARKB
EQYAARKBFQkGIAEBEoEVCSAAFRGAgQETAAYVEYCBAQ4EIAATAAgVEoEZARGBHQsAARUSgRkBEwAT
AAsgAQEVEoEZARGBHQYgAQESgSUHMAEBHgAeAAQKARJxBSAAEoEtBCABHA4FCgESgIUIAAESgTUR
gTkEIAASPQYgAgEOEj0It3pcVhk04IkIiYRdzYCAzJEIj7Bstk0BmhcEAAAAAAQBAAAABAYSgJUE
BhKAmQMGEhACBggDBhEUByACEj0cEkUIIAISPRJFEj0NAAYBEl0OEk0SUQkSVQUAABKAlQUAABKA
mQYAAQESgJkEAAASEAMAAAEFCAASgJUFCAASgJkECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5v
bkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYzYwMjVlYjMxMWJlNGZlY2JkMWQ3YzJi
ZmVkZTQ4ZWYAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMQAASQEAGi5ORVRGcmFtZXdvcmss
VmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcA
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAACg9AAAAAAAAAAAAAEI9AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0PQAA
AAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAFF+nx4AAAEAUX6fHj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8AYwA2ADAAMgA1AGUAYgAzADEAMQBiAGUANABmAGUAYwBiAGQAMQBkADcAYwAyAGIAZgBlAGQA
ZQA0ADgAZQBmAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAOAAz
ADkALgAzADIAMwAzADcAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8A
YwA2ADAAMgA1AGUAYgAzADEAMQBiAGUANABmAGUAYwBiAGQAMQBkADcAYwAyAGIAZgBlAGQAZQA0
ADgAZQBmAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8A
cAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADEAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABl
AG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAFQAXwBjADYAMAAyADUAZQBiADMAMQAxAGIAZQA0AGYAZQBjAGIAZAAxAGQANwBjADIAYgBm
AGUAZABlADQAOABlAGYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBUAF8AYwA2ADAAMgA1AGUAYgAzADEAMQBiAGUANABmAGUAYwBiAGQAMQBkADcAYwAyAGIAZgBl
AGQAZQA0ADgAZQBmAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADgAMwA5AC4AMwAyADMAMwA3AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA3ADgAMwA5AC4AMwAyADMAMwA3AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAFQ9AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="123.5,123.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>